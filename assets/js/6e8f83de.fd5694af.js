"use strict";(self.webpackChunkvsb_subjects=self.webpackChunkvsb_subjects||[]).push([[165],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(n),m=a,v=l["".concat(c,".").concat(m)]||l[m]||d[m]||i;return n?r.createElement(v,o(o({ref:t},u),{},{components:n})):r.createElement(v,o({ref:t},u))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[l]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8369:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2,title:"Receive"},o=void 0,s={unversionedId:"subjects/POS/Testy/Java/programovani/receive",id:"subjects/POS/Testy/Java/programovani/receive",title:"Receive",description:"",source:"@site/docs/subjects/POS/Testy/Java/1_programovani/receive.md",sourceDirName:"subjects/POS/Testy/Java/1_programovani",slug:"/subjects/POS/Testy/Java/programovani/receive",permalink:"/vsb-informatika/docs/subjects/POS/Testy/Java/programovani/receive",draft:!1,editUrl:"https://github.com/Makhuta/vsb-informatika-source/tree/main/docs/subjects/POS/Testy/Java/1_programovani/receive.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Receive"},sidebar:"POS",previous:{title:"Send",permalink:"/vsb-informatika/docs/subjects/POS/Testy/Java/programovani/send"}},c={},p=[],u={toc:p},l="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.MulticastSocket;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n\npublic class MessageReader implements Runnable {\n    private static String HOSTNAME = "0.0.0.0";\n    private static int PORT = 8010;\n    private Thread thread;\n    private byte[] buffer = new byte[256];\n\n    public void start() {\n        thread = new Thread(this);\n        thread.start();\n    }\n\n    @Override\n    public void run() {\n        try (MulticastSocket socket = new MulticastSocket(PORT)) {\n            String text;\n\n            do {\n                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n                socket.receive(packet);\n\n                byte[] data = packet.getData();\n                text = new String(data, 9, packet.getLength());\n\n                StringBuilder address = new StringBuilder();\n                for (int i = 0; i < 4; i++) {\n                    int part = 0xFF & data[i];\n                    if (address.length() > 0) {\n                        address.append(".");\n                    }\n                    address.append(part);\n                }\n\n                int timestamp = (data[4] << 24) & 0xff000000 | (data[5] << 16) & 0x00ff0000 | (data[6] << 8) & 0x00ff00 | (data[7] << 0) & 0x000000ff;\n                String date = new SimpleDateFormat("dd. MM. yyyy HH:mm:ss").format(new Date((long) timestamp * 1000));\n\n                System.out.println("[" + address + "](" + date + "): " + text);\n\n\n            } while (!text.equalsIgnoreCase("down"));\n        } catch (IOException e) {\n            throw new RuntimeException("");\n        }\n    }\n\n    public void stop() {\n        if(thread != null) {\n            thread.interrupt();\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);